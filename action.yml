name: 'get deployment freeze'

description: 'A deployment-freeze-status tag is defined on AWS resource,  '

inputs:
  environment:
    description: >-
      one of the testing, preprod or prod envinronment, for the workflow run
    required: true
    type: string
  github-pat:
    description: >-
      GitHub personal access token
    required: true
outputs:
  IS_PREPROD_FROZEN:
    description: >-
      whether preprod environement is locked for the deployment
    value: ${{ steps.preprod.outputs.status }}
  IS_PROD_FROZEN:
    description: >-
      whether preprod environement is locked for the deployment
    value: ${{ steps.prod.outputs.status }}
      
runs:
  using: "composite"
  steps:
    - name: init job  
      uses: myriad-actions/init-job@main
      with:
        github-pat: ${{ inputs.github-pat }}
    - name: Configure AWS credentials 
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.AWS-ROLE-TO-ASSUME }}
        aws-region: ${{ env.AWS-REGION }}
    - name: retrieve preprod status
      if: ${{ env.HOST_MODE == 'ecs' }}
      id: preprod
      run: |
        ${{ env.HOST_MODE == 'ecs' }} && echo "true" || echo "false"
    - name: retrieve preprod status
      if: ${{ env.HOST_MODE == 'ecs' }}
      id: prod
      run: |
        ${{ env.HOST_MODE == 'ecs' }} && echo "true" || echo "false"
   #    echo "::set-output name=STATUS::$(grep 'app:' mix.exs | sed -e 's/\[//g' -e 's/ //g' -e 's/app://' -e 's/[:,]//g')"
   #    echo is_${{ inputs.environment }}_frozen= >> DFS.env
      shell: bash
   #- name: retrieve prod status
   #  if: ${{ env.HOST_MODE == 'ec2' }}
   #  step: prod
   #  run: |
   #    touch DFS.env
   #    echo is_${{ inputs.environment }}_frozen=$(aws ec2 describe-instances --region ${{ env.AWS-REGION }} --filters "Name=tag:Environment,Values=${{ inputs.environment }}"  "Name=instance-state-name,Values=running" ${{ env.EXTRA-EC2-FILTERS}}  --query 'Reservations[*].Instances[*].InstanceId' | jq  -r ".[]|.[]") >> DFS.env
   #  shell: bash
